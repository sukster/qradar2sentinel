{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
            "PlaybookName": {
            "defaultValue": "SendOffenseEvents",
            "type": "String",
            "metadata": {
                "description": "This is a custom developed Azure Logic App that will ingest QRadar Offense events and send them to Microsoft Sentinel."
            }
        },
        "workspaceId": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide the Workspace ID for the Sentinel workspace."
            }
        },
        "workspaceKey": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Provide the Workspace Key for the Sentinel workspace."
            }
        },
        "AzureKeyVaultName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide the name of the Key Vault which stores the QRadar api key secret. If the Key Vault doesn't exist, please create one in the resource group where the logic app will be deployed."
            }
        },
        "QradarApiKeyVaultSecretName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide the name of the Secret in the Key Vault which stores the QRadar API key. If the Secret doesn't exist, please create one in the Key Vault and store the QRadar API key there."
            }
        },
        "QradarCustomConnectorName":{
            "defaultValue": "",
            "type": "string",
            "metadata": {
            "description": "Provide the name of the Logic Apps Custom Connector for QRadar. If this connector doesn't exist, use the template provided with this logic app to create one. Also please make sure to enable the On-Premises Data Gateway in the configuration of this Logic Apps Custom Connector."
            }
        },
        "On-PremisesDataGatewayName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide the name of the On-Premises Data Gateway which is used to connect this Logic App to QRadar. If this On-Premises Data Gateway does not exist, please create it."
            }
        }
    },
    "variables": {
        "AzureLogAnalyticsDataCollectorConnectionName": "[concat('azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
        "AzureKeyVaultConnectionName": "[concat('keyvault-', parameters('PlaybookName'))]",
        "QRadarConnectorConnectionName": "[concat('qradarconnector-', parameters('PlaybookName'))]",
        "singlequote": "'"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureLogAnalyticsDataCollectorConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[variables('AzureLogAnalyticsDataCollectorConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                },
                "parameterValues": {
                    "username": "[parameters('workspaceId')]",
                    "password": "[parameters('workspaceKey')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureKeyVaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureKeyVaultConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('AzureKeyVaultName')]"
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                }
            }
        },
        {
        "type": "Microsoft.Web/connections",
        "apiVersion": "2016-06-01",
        "name": "[variables('QRadarConnectorConnectionName')]",
        "location": "[resourceGroup().location]",
        "properties": {
            "customParameterValues": {},
            "api": {
            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('QradarCustomConnectorName'))]"
                },
            "displayName": "[variables('QRadarConnectorConnectionName')]",
            "parameterValueSet": {
                "name": "[variables('QRadarConnectorConnectionName')]",
                "authType": "none",
                "gateway": {
                    "value": {
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connectionGateways/', parameters('On-PremisesDataGatewayName'))]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('QRadarConnectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "CloseOffenses": {
                            "defaultValue": "Yes",
                            "type": "String"
                        },
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "interval": 5,
                                "frequency": "Minute",
                                "timeZone": "Central Europe Standard Time"
                            },
                            "evaluatedRecurrence": {
                                "interval": 5,
                                "frequency": "Minute",
                                "timeZone": "Central Europe Standard Time"
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Get_Offenses": {
                            "runAfter": {
                                "ReferenceMap_Exists": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "headers": {
                                    "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                    "Accept": "application/json",
                                    "Content-Type": "application/json"
                                },
                                "path": "/api/siem/offenses",
                                "queries": {
                                    "filter": "status = OPEN"
                                }
                            }
                        },
                        "Get_QRadar_API_Token": {
                            "runAfter": {
                                "Initialize_EventSearchStop_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "[concat('/secrets/@{encodeURIComponent(', variables('singlequote'), parameters('QradarApiKeyVaultSecretName'), variables('singlequote'),')}/value')]"
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "inputs",
                                        "outputs"
                                    ]
                                }
                            }
                        },
                        "For_each_offense": {
                            "foreach": "@body('Get_Offenses')",
                            "actions": {
                                "Parse_offense_JSON": {
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@items('For_each_offense')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "last_persisted_time": {
                                                    "type": "integer"
                                                },
                                                "username_count": {
                                                    "type": "integer"
                                                },
                                                "description": {
                                                    "type": "string"
                                                },
                                                "rules": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "type": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "type"
                                                        ]
                                                    }
                                                },
                                                "event_count": {
                                                    "type": "integer"
                                                },
                                                "flow_count": {
                                                    "type": "integer"
                                                },
                                                "assigned_to": {},
                                                "security_category_count": {
                                                    "type": "integer"
                                                },
                                                "follow_up": {
                                                    "type": "boolean"
                                                },
                                                "source_address_ids": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "source_count": {
                                                    "type": "integer"
                                                },
                                                "inactive": {
                                                    "type": "boolean"
                                                },
                                                "protected": {
                                                    "type": "boolean"
                                                },
                                                "closing_user": {},
                                                "destination_networks": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "source_network": {
                                                    "type": "string"
                                                },
                                                "category_count": {
                                                    "type": "integer"
                                                },
                                                "close_time": {},
                                                "remote_destination_count": {
                                                    "type": "integer"
                                                },
                                                "start_time": {
                                                    "type": "integer"
                                                },
                                                "magnitude": {
                                                    "type": "integer"
                                                },
                                                "last_updated_time": {
                                                    "type": "integer"
                                                },
                                                "credibility": {
                                                    "type": "integer"
                                                },
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "categories": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "severity": {
                                                    "type": "integer"
                                                },
                                                "policy_category_count": {
                                                    "type": "integer"
                                                },
                                                "log_sources": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "type_name": {
                                                                "type": "string"
                                                            },
                                                            "type_id": {
                                                                "type": "integer"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "type_name",
                                                            "type_id",
                                                            "name"
                                                        ]
                                                    }
                                                },
                                                "closing_reason_id": {},
                                                "device_count": {
                                                    "type": "integer"
                                                },
                                                "first_persisted_time": {
                                                    "type": "integer"
                                                },
                                                "offense_type": {
                                                    "type": "integer"
                                                },
                                                "relevance": {
                                                    "type": "integer"
                                                },
                                                "domain_id": {
                                                    "type": "integer"
                                                },
                                                "offense_source": {
                                                    "type": "string"
                                                },
                                                "local_destination_address_ids": {
                                                    "type": "array"
                                                },
                                                "local_destination_count": {
                                                    "type": "integer"
                                                },
                                                "status": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "Search_Events": {
                                    "runAfter": {
                                        "Set_EventSearchStop_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "headers": {
                                            "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                            "Accept": "application/json",
                                            "Content-Type": "application/json"
                                        },
                                        "path": "/api/ariel/searches",
                                        "queries": {
                                            "query_expression": "SELECT starttime, protocolid, sourceip, logsourceid, qid, sourceport, magnitude, destinationip, destinationport, category, username, payload FROM events WHERE INOFFENSE(@{body('Parse_offense_JSON')?['id']}) START @{variables('EventSearchStart')} STOP @{variables('EventSearchStop')}"
                                        }
                                    }
                                },
                                "Parse_Search_ID": {
                                    "runAfter": {
                                        "Search_Events": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Search_Events')",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "query_string": {
                                                    "type": "string"
                                                },
                                                "completed": {
                                                    "type": "boolean"
                                                },
                                                "search_id": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "Get_Search_Results": {
                                    "runAfter": {
                                        "Until_Search_Completed": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "headers": {
                                            "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                            "Accept": "application/json",
                                            "Content-Type": "application/json"
                                        },
                                        "path": "/api/ariel/searches/@{encodeURIComponent(body('Parse_Search_ID')?['search_id'])}/results"
                                    }
                                },
                                "Until_Search_Completed": {
                                    "actions": {
                                        "Get_Search_Status": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "headers": {
                                                    "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                                    "Accept": "application/json",
                                                    "Content-Type": "application/json"
                                                },
                                                "path": "/api/ariel/searches/@{encodeURIComponent(body('Parse_Search_ID')?['search_id'])}"
                                            }
                                        },
                                        "Parse_Search_Status_JSON": {
                                            "runAfter": {
                                                "Get_Search_Status": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('Get_Search_Status')",
                                                "schema": {
                                                    "type": "object",
                                                    "properties": {
                                                        "status": {
                                                            "type": "string"
                                                        },
                                                        "processed_record_count": {
                                                            "type": "integer"
                                                        },
                                                        "query_execution_time": {
                                                            "type": "integer"
                                                        },
                                                        "query_string": {
                                                            "type": "string"
                                                        },
                                                        "record_count": {
                                                            "type": "integer"
                                                        },
                                                        "completed": {
                                                            "type": "boolean"
                                                        },
                                                        "search_id": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_Search_ID": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": "@equals(body('Parse_Search_Status_JSON')?['status'],'COMPLETED')",
                                    "limit": {
                                        "count": 30,
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                },
                                "For_Each_Event": {
                                    "foreach": "@body('Get_Search_Results')?['events']",
                                    "actions": {
                                        "Send_Events_to_LAW": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "body": "@{items('For_Each_Event')}",
                                                "headers": {
                                                    "Log-Type": "OffenseEvents",
                                                    "time-generated-field": "@utcNow()"
                                                },
                                                "path": "/api/logs"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Get_Search_Results": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "Update_Offense_Status": {
                                    "runAfter": {
                                        "Update_ReferenceMap_Elements": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "headers": {
                                            "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                            "Accept": "application/json",
                                            "Content-Type": "application/json"
                                        },
                                        "path": "/api/siem/offenses/@{encodeURIComponent(body('Parse_offense_JSON')?['id'])}",
                                        "queries": {
                                            "status": "OPEN"
                                        }
                                    }
                                },
                                "Update_ReferenceMap_Elements": {
                                    "runAfter": {
                                        "For_Each_Event": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "headers": {
                                            "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                            "Accept": "application/json",
                                            "Content-Type": "application/json"
                                        },
                                        "path": "/api/reference_data/maps/@{encodeURIComponent('SentinelLogicApp')}",
                                        "queries": {
                                            "key": "@{body('Parse_offense_JSON')?['id']}",
                                            "value": "@variables('EventSearchStop')",
                                            "source": "@{body('Parse_offense_JSON')?['id']}"
                                        }
                                    }
                                },
                                "Get_ReferenceMap_Elements": {
                                    "runAfter": {
                                        "Parse_offense_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "headers": {
                                            "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                            "Accept": "application/json",
                                            "Content-Type": "application/json"
                                        },
                                        "path": "/api/reference_data/maps/@{encodeURIComponent('SentinelLogicApp')}",
                                        "queries": {
                                            "fields": "data",
                                            "filter": "source=@{body('Parse_offense_JSON')?['id']}"
                                        }
                                    }
                                },
                                "Set_EventSearchStop_variable": {
                                    "runAfter": {
                                        "Offense_Record_Exists_in_ReferenceMap": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "EventSearchStop",
                                        "value": "@string(div(sub(ticks(utcNow()),ticks('1970-01-01T00:00:00Z')),10000))"
                                    }
                                },
                                "Offense_Record_Exists_in_ReferenceMap": {
                                    "actions": {
                                        "Set_EventSearchStart_variable_1": {
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "EventSearchStart",
                                                "value": "@body('Get_ReferenceMap_Elements')?['data']?[string(body('Parse_offense_JSON')?['id'])]?['value']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Get_ReferenceMap_Elements": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Set_EventSearchStart_variable_2": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "EventSearchStart",
                                                    "value": "@string(body('Parse_offense_JSON')?['start_time'])"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@not(empty(body('Get_ReferenceMap_Elements')?['data']?[string(body('Parse_offense_JSON')?['id'])]?['value']))",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Get_Offenses": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Get_ReferenceMaps": {
                            "runAfter": {
                                "Get_QRadar_API_Token": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "headers": {
                                    "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                    "Accept": "application/json",
                                    "Content-Type": "application/json"
                                },
                                "path": "/api/reference_data/maps",
                                "queries": {
                                    "filter": "name=SentinelLogicApp"
                                }
                            }
                        },
                        "ReferenceMap_Exists": {
                            "actions": {},
                            "runAfter": {
                                "Get_ReferenceMaps": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Create_ReferenceMap": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['qradar-offenses']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "headers": {
                                                "SEC": "@body('Get_QRadar_API_Token')?['value']",
                                                "Accept": "application/json",
                                                "Content-Type": "application/json"
                                            },
                                            "path": "/api/reference_data/maps",
                                            "queries": {
                                                "element_type": "DATE",
                                                "name": "SentinelLogicApp",
                                                "time_to_live": "7 days",
                                                "key_label": "offense_id",
                                                "timeout_type": "LAST_SEEN",
                                                "value_label": "last_event_search_time"
                                            }
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@not(empty(body('Get_ReferenceMaps')))",
                                            true
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_EventSearchStart_variable": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "EventSearchStart",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_EventSearchStop_variable": {
                            "runAfter": {
                                "Initialize_EventSearchStart_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "EventSearchStop",
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "QRadarCustomConnector-Prod": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('QRadarConnectorConnectionName'))]",
                                "connectionName": "QRadarCustomConnector-Prod",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('QradarCustomConnectorName'))]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureKeyVaultConnectionName'))]",
                                "connectionName": "keyvault",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]",
                                "connectionName": "azureloganalyticsdatacollector",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}